/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import database.H2Prepare;
import database.H2Setup;
import database.H2Task;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.event.HyperlinkEvent;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Element;
import javax.swing.text.html.HTML;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.html.StyleSheet;
import jiconfont.icons.font_awesome.FontAwesome;
import jiconfont.swing.IconFontSwing;
import opennlp.tools.doccat.DoccatModel;
import opennlp.tools.doccat.DocumentCategorizerME;
import reader.FileParser;

/**
 *
 * @author amit
 */
public class AutoTagResult extends javax.swing.JInternalFrame {

    public static HTMLEditorKit fileSearchKit;

    public AutoTagResult() {
        IconFontSwing.register(FontAwesome.getIconFont());
        initComponents();
        fileSearchKit = new HTMLEditorKit();
        jEditorPane1.setEditorKit(fileSearchKit);
        proccessFunctions();
        StyleSheet styleSheet = fileSearchKit.getStyleSheet();
        styleSheet.addRule(".file {font-size: 9px; font-style: italic;}");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jProgressBar1 = new javax.swing.JProgressBar();

        setClosable(true);
        setIconifiable(true);
        setTitle("Auto Tagging");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jEditorPane1.setEditable(false);
        jEditorPane1.setContentType("text/html"); // NOI18N
        jEditorPane1.setText("");
        jScrollPane1.setViewportView(jEditorPane1);

        jProgressBar1.setString("");
        jProgressBar1.setStringPainted(true);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 723, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        ArrayList<String> userFolders = H2Prepare.getUserFolders();
        try {
            AutoTagResult.fileSearchKit.read(new StringReader("<p>Click on tag that matches the most,</p>"), AutoTagResult.jEditorPane1.getDocument(), AutoTagResult.jEditorPane1.getDocument().getLength());
        } catch (IOException ex) {
            Logger.getLogger(AutoTagResult.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadLocationException ex) {
            Logger.getLogger(AutoTagResult.class.getName()).log(Level.SEVERE, null, ex);
        }
        userFolders.forEach((userFolder) -> {
            new DummyThread4(userFolder, H2Setup.getAllowedFileTypes()).start();
        });
    }//GEN-LAST:event_formInternalFrameOpened
    private void proccessFunctions() {
        jEditorPane1.addHyperlinkListener((HyperlinkEvent e) -> {
            if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                Element elem = e.getSourceElement();
                if (elem != null) {
                    AttributeSet attr = elem.getAttributes();
                    System.out.println(attr);
                    AttributeSet a = (AttributeSet) attr.getAttribute(HTML.Tag.A);
                    if (a != null) {
                        File f = new File((String) a.getAttribute(HTML.Attribute.HREF));
                        if (f.exists()) {

                        } else {

                        }
                    }
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}

class DummyThread4 extends Thread {

    ArrayList<String> allowedFileTypes, files, chunks;
    String path;
    File[] models;

    public DummyThread4(String path, ArrayList<String> allowedFileTypes) {
        this.path = path;
        this.allowedFileTypes = allowedFileTypes;
        models = new File("resources\\models").listFiles();
    }

    @Override
    public void run() {
        File f = new File(path);
        try {
            if (f.isDirectory()) {
                files = H2Task.getFiles(f.getCanonicalPath().hashCode(), allowedFileTypes);
            } else if (f.isFile()) {
                files = H2Task.getFile(f.getCanonicalPath().hashCode(), allowedFileTypes);
            } else {
                return;
            }
            files.forEach((String file) -> {
                //System.out.println("Creating chunks for " + file);
                chunks = new FileParser(file).getContentChunks();
                HashMap<String, Double> map = new HashMap();

                //System.out.println(chunks);
                for (File model : models) {
                    InputStream inputStream = null;
                    try {
                        //System.out.println("Testing against " + model.getName());
                        inputStream = new FileInputStream(model);
                        DoccatModel _model = new DoccatModel(inputStream);
                        DocumentCategorizerME myCategorizer = new DocumentCategorizerME(_model);
                        for (String chunk : chunks) {
                            //System.out.println("Chunk: " + chunk);
                            double[] outcomes = myCategorizer.categorize(chunk.split(" "));
                            String category = myCategorizer.getBestCategory(outcomes);
                            //System.out.println("\n---------------------------------\nCategory : Probability\n---------------------------------");
                            for (int i = 0; i < myCategorizer.getNumberOfCategories(); i++) {
                                if (map.containsKey(myCategorizer.getCategory(i))) {
                                    map.put(myCategorizer.getCategory(i), map.get(myCategorizer.getCategory(i)) + outcomes[i]);
                                } else {
                                    map.put(myCategorizer.getCategory(i), outcomes[i]);
                                }
                                //System.out.println(myCategorizer.getCategory(i) + " : " + outcomes[i]);
                            }
                            //System.out.println("---------------------------------");
                            //System.out.println("Test string is : " + category);
                        }
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(DummyThread4.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(DummyThread4.class.getName()).log(Level.SEVERE, null, ex);
                    } finally {
                        try {
                            inputStream.close();
                        } catch (IOException ex) {
                            Logger.getLogger(DummyThread4.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
                map = sortByValue(false, map);
                List<String> keys = map.entrySet().stream()
                        .map(Map.Entry::getKey)
                        .limit(5)
                        .collect(Collectors.toList());
                String html = "";
                html = keys.stream().map((key) -> "<a href=\"\">" + key + "<a>, ").reduce(html, String::concat);
                try {
                    AutoTagResult.fileSearchKit.read(new StringReader("<p><a title=\"Open file\" href=\"" + file + "\"><strong>" + file + "</strong></a><br /> "
                            + "<span style=\"font-size:10px\"><strong>Possible Tags:</strong>: " + html + "</span></p>"), AutoTagResult.jEditorPane1.getDocument(), AutoTagResult.jEditorPane1.getDocument().getLength());
                } catch (IOException | BadLocationException ex) {
                    Logger.getLogger(DocCatTrainer.class.getName()).log(Level.SEVERE, null, ex);
                }
            });
        } catch (IOException e) {
            Logger.getLogger(DummyThread4.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    HashMap sortByValue(boolean order, HashMap map) {
        List<Entry<String, Double>> list = new LinkedList<Entry<String, Double>>(map.entrySet());
        Collections.sort(list, new Comparator<Entry<String, Double>>() {
            public int compare(Entry<String, Double> o1, Entry<String, Double> o2) {
                if (order) {
                    return o1.getValue().compareTo(o2.getValue());
                } else {
                    return o2.getValue().compareTo(o1.getValue());
                }
            }
        });
        HashMap<String, Double> sortedMap = new LinkedHashMap<>();
        for (Entry<String, Double> entry : list) {
            sortedMap.put(entry.getKey(), entry.getValue());
        }
        return sortedMap;
    }
}
