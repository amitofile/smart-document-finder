/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import database.H2Setup;
import database.H2Task;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.HyperlinkEvent;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Element;
import javax.swing.text.html.HTML;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.html.StyleSheet;
import jiconfont.icons.font_awesome.FontAwesome;
import jiconfont.swing.IconFontSwing;
import nlp.trainer.DocumentCategoryTrainer;
import reader.FileParser;

/**
 *
 * @author amit
 */
public class DocCatTrainer extends javax.swing.JInternalFrame {

    public static HTMLEditorKit fileSearchKit;
    public static ArrayList<String> files;
    private Thread t1;

    public DocCatTrainer() {
        IconFontSwing.register(FontAwesome.getIconFont());
        initComponents();
        fileSearchKit = new HTMLEditorKit();
        jEditorPane1.setEditorKit(fileSearchKit);
        proccessFunctions();
        StyleSheet styleSheet = fileSearchKit.getStyleSheet();
        styleSheet.addRule(".file {font-size: 9px; font-style: italic;}");
        jLabel1.setText("Total Files: 0");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setTitle("Document Tagging");

        jButton1.setIcon(IconFontSwing.buildIcon(FontAwesome.TAGS, 15));
        jButton1.setText("Tag All");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(H2Setup.getTags().toArray()));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(H2Setup.getSubTags((String)jComboBox1.getSelectedItem()).toArray()));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jButton2.setIcon(IconFontSwing.buildIcon(FontAwesome.LIGHTBULB_O, 15));
        jButton2.setText("Teach Me");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel1.setText(":");

        jProgressBar1.setString("");
        jProgressBar1.setStringPainted(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(2, 2, 2))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(62, 62, 62)
                .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7))
        );

        jButton3.setText("List Files From Selected Folder");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jEditorPane1.setEditable(false);
        jEditorPane1.setContentType("text/html"); // NOI18N
        jEditorPane1.setText("");
        jScrollPane1.setViewportView(jEditorPane1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap(512, Short.MAX_VALUE)
                        .addComponent(jButton3)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jEditorPane1.setText("");
        jLabel1.setText("Total Files: 0");
        jProgressBar1.setValue(0);
        ArrayList<String> allowedFileTypes;
        if ("".equals(MainLayout02.searchPath.getText())) {
            JOptionPane.showMessageDialog(this.getRootPane(), "No folder or file selected", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if ("All".equals(MainLayout02.jComboBox1.getSelectedItem().toString())) {
            allowedFileTypes = H2Setup.getAllowedFileTypes();
        } else {
            allowedFileTypes = H2Setup.getAllowedFileTypes(MainLayout02.jComboBox1.getSelectedItem().toString());
        }
        listFiles(allowedFileTypes);
    }//GEN-LAST:event_jButton3ActionPerformed

    public static void listFiles(ArrayList<String> allowedFileTypes) {
        jEditorPane1.setText("");
        FolderScan3 fs = new FolderScan3(MainLayout02.searchPath.getText(), allowedFileTypes, null, "SCAN");
        MainLayout02.jPanel2.add(fs);
        MainLayout02.jPanel2.revalidate();
        Thread t = new Thread(fs);
        t.start();
        new DummyThread(t, allowedFileTypes).start();
    }

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed

    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(H2Setup.getSubTags((String) jComboBox1.getSelectedItem()).toArray()));
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (files != null && !files.isEmpty()) {
            String trainer = (String) jComboBox1.getSelectedItem(), tag = (String) jComboBox2.getSelectedItem();
            if (0 == JOptionPane.showConfirmDialog(this.getRootPane(), "Do you want to tag " + files.size() + " file(s) as " + trainer + "," + tag + "?", "Please Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)) {
                jLabel1.setText("Tagging started....");
                t1 = new DummyThread2(files, trainer + "," + tag);
                t1.start();
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (files != null && !files.isEmpty()) {
            String trainer = (String) jComboBox1.getSelectedItem(), tag = (String) jComboBox2.getSelectedItem();
            if (0 == JOptionPane.showConfirmDialog(this.getRootPane(), "Are you sure all given tags are correct?", "Please Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)) {
                jLabel1.setText("Training started....");
                t1 = new DummyThread3(files, tag, trainer);
                t1.start();
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void proccessFunctions() {
        jEditorPane1.addHyperlinkListener((HyperlinkEvent e) -> {
            if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                Element elem = e.getSourceElement();
                if (elem != null) {
                    AttributeSet attr = elem.getAttributes();
                    System.out.println(attr);
                    AttributeSet a = (AttributeSet) attr.getAttribute(HTML.Tag.A);
                    if (a != null) {
                        File f = new File((String) a.getAttribute(HTML.Attribute.HREF));
                        if (f.exists()) {
                            System.out.println("dddd");
                        } else {
                            System.out.println("ssss");
                        }
                    }
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    public static javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    public static javax.swing.JEditorPane jEditorPane1;
    public static javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    public static javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}

class DummyThread3 extends Thread {

    ArrayList<String> files;
    String trainer, tag;

    public DummyThread3(ArrayList<String> files, String tag, String trainer) {
        this.files = files;
        this.trainer = trainer;
        this.tag = tag;
    }

    private void makeTrainer(String trainer, String tag, ArrayList<String> chunks) {
        File file = new File("resources\\" + trainer + "_my.train");
        try (FileWriter fr = new FileWriter(file, true)) {
            try (BufferedWriter br = new BufferedWriter(fr)) {
                chunks.forEach((chunk) -> {
                    try {
                        if (chunk.length() > 50) {
                            br.write(tag.replaceAll("\\s", "-") + " " + chunk + "\n");
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(DocCatTrainer.class.getName()).log(Level.SEVERE, null, ex);
                    }
                });
            }
        } catch (IOException ex) {
            Logger.getLogger(DocCatTrainer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void run() {
        DocCatTrainer.jProgressBar1.setMaximum(files.size());
        DocCatTrainer.jProgressBar1.setValue(0);
        DocCatTrainer.jProgressBar1.setString("Building training data...");
        files.forEach((file) -> {
            //DocCatTrainer.jProgressBar1.setString(file);
            makeTrainer(trainer, tag, new FileParser(file).getContentChunks());
            DocCatTrainer.jProgressBar1.setValue(DocCatTrainer.jProgressBar1.getValue() + 1);
        });
        DocCatTrainer.jProgressBar1.setString("Training modules...");
        new DocumentCategoryTrainer("resources\\" + trainer + ".train").startTraining("en", trainer);
        DocCatTrainer.jLabel1.setText("Training completed.");
        DocCatTrainer.jProgressBar1.setString("");
        MainLayout02.status.setText("Task completed");
    }
}

class DummyThread2 extends Thread {

    ArrayList<String> files;
    String tags;
    ArrayList<String> allowedFileTypes;

    public DummyThread2(ArrayList<String> files, String tags) {
        this.files = files;
        this.tags = tags;
    }

    @Override
    public void run() {
        DocCatTrainer.jProgressBar1.setMaximum(files.size());
        DocCatTrainer.jProgressBar1.setValue(0);
        files.forEach((file) -> {
            DocCatTrainer.jProgressBar1.setString(file);
            H2Task.setTag(file.hashCode(), tags);
            DocCatTrainer.jProgressBar1.setValue(DocCatTrainer.jProgressBar1.getValue() + 1);
        });
        DocCatTrainer.jLabel1.setText("Tagging completed.");
        if ("All".equals(MainLayout02.jComboBox1.getSelectedItem().toString())) {
            allowedFileTypes = H2Setup.getAllowedFileTypes();
        } else {
            allowedFileTypes = H2Setup.getAllowedFileTypes(MainLayout02.jComboBox1.getSelectedItem().toString());
        }
        DocCatTrainer.listFiles(H2Setup.getAllowedFileTypes());
        DocCatTrainer.jProgressBar1.setString("");
        MainLayout02.status.setText("Task completed");
    }
}

class DummyThread extends Thread {

    ArrayList<String> allowedFileTypes;
    Thread t;

    public DummyThread(Thread t, ArrayList<String> allowedFileTypes) {
        this.t = t;
        this.allowedFileTypes = allowedFileTypes;
    }

    @Override
    public void run() {
        while (t.isAlive()) {
        }
        try {
            File f = new File(MainLayout02.searchPath.getText());
            if (f.isDirectory()) {
                DocCatTrainer.files = H2Task.getFiles(f.getCanonicalPath().hashCode(), allowedFileTypes);
            } else if (f.isFile()) {
                DocCatTrainer.files = H2Task.getFile(f.getCanonicalPath().hashCode(), allowedFileTypes);
            } else {
                return;
            }
            DocCatTrainer.jLabel1.setText("Total Files: " + DocCatTrainer.files.size());
            DocCatTrainer.files.forEach((String file) -> {
                try {
                    DocCatTrainer.fileSearchKit.read(new StringReader("<p><a title=\"Open file\" href=\"" + file + "\"><strong>" + file + "</strong></a><br /> "
                            + "<span style=\"font-size:10px\"><strong>Tags</strong>: " + H2Task.getTags(file.hashCode()) + "</span> "
                            + "<span style=\"color: #008000;\"><a style=\"color: #008000;\" title=\"Add new tag\" href=\"add|\"><strong>Add Tag</strong></a> "
                            + "<span style=\"color: #ff0000;\"><a style=\"color: #ff0000;\" title=\"Remove all tags\" href=\"remove|\"><strong>Remove Tag</strong></a></span></span></p>"), DocCatTrainer.jEditorPane1.getDocument(), DocCatTrainer.jEditorPane1.getDocument().getLength());
                } catch (IOException | BadLocationException ex) {
                    Logger.getLogger(DocCatTrainer.class.getName()).log(Level.SEVERE, null, ex);
                }
            });
        } catch (IOException ex) {
            System.err.println(ex.getMessage());
        }
    }
}
