/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import reader.FileParser;
import reader.KeywordFinder;

/**
 *
 * @author amit
 */
public class FolderScan2 extends javax.swing.JPanel implements Runnable {

    private final String dirPath;
    private final ArrayList<String> fileTypes;
    public int totalFiles = 0, relatedFiles = 0;
    public HashMap<String, Integer> relatedFilesCount = new HashMap<>();
    private int progressBarMin = 0, progressBarMax = 100, progressBarVal = 0;
    private boolean keepGoing = true;
    static final boolean DEBUG = true;
    private final String[] words;

    /**
     * Creates new form StatusBar
     *
     * @param dirPath
     * @param fileTypes
     */
    public FolderScan2(String[] words, String dirPath, ArrayList<String> fileTypes) {
        this.dirPath = dirPath;
        this.fileTypes = fileTypes;
        this.words = words;
        fileTypes.forEach((String _item) -> {
            relatedFilesCount.put(_item, 0);
        });
        initComponents();
        progressBarMin = jProgressBar1.getMinimum();
        progressBarMax = jProgressBar1.getMaximum();
        jProgressBar1.setString(dirPath);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        jButton1 = new javax.swing.JButton();

        setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setMaximumSize(null);

        jProgressBar1.setString("");
        jProgressBar1.setStringPainted(true);

        jButton1.setText("Stop");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jButton1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            Thread.sleep(1000);
            keepGoing = false;
        } catch (InterruptedException ex) {
            System.err.println(ex.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JProgressBar jProgressBar1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        if (DEBUG) {
            System.out.println("Scanning started for " + dirPath);
        }
        scanDirRecursive(new File(dirPath));
        if (DEBUG) {
            System.out.println("Scanning finished for " + dirPath + "[Total:" + totalFiles + ", Related:" + relatedFiles + ", " + relatedFilesCount + "]");
        }
        setVisible(false);
        getParent().remove(this);
    }

    private void scanDirRecursive(File dir) {
        try {
            File[] files = dir.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (keepGoing) {
                        if (file.isDirectory()) {
                            scanDirRecursive(file);
                        } else {
                            totalFiles++;
                            String file_name = file.getName();
                            String file_type = file_name.substring(file_name.lastIndexOf('.') + 1).toLowerCase();
                            if (fileTypes.contains(file_type)) {
                                String file_path = file.getCanonicalPath();
                                relatedFiles++;
                                relatedFilesCount.put(file_type, relatedFilesCount.get(file_type) + 1);
                                new FileScannerThread(file_path, words).start();
                                jProgressBar1.setValue(progressBarVal++);
                                if (progressBarVal >= progressBarMax) {
                                    progressBarVal = progressBarMin;
                                }
                            }
                        }
                    }
                }
            }
        } catch (IOException e) {
            System.err.println(e.getMessage());
        }
    }
}

class FileScannerThread extends Thread {

    private final String filePath;
    private final String[] words;
    private KeywordFinder finder;

    public FileScannerThread(String filePath, String[] words) {
        this.filePath = filePath;
        this.words = words;
        FileParser parser = new FileParser();
        parser.parse(filePath);
        this.finder = new KeywordFinder(parser.getContent());
        parser.clean();
        parser = null;
    }

    @Override
    public void run() {
        for (String word : words) {
            String temp = finder.find(word);
            if (temp != null) {
                ContentSearchRow row = new ContentSearchRow(filePath, temp);
                MainLayout01.jPanel5.add(row);
                MainLayout01.jPanel5.revalidate();
            }
        }
        finder.clean();
        finder = null;
    }

}
